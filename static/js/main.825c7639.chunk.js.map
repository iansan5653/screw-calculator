{"version":3,"sources":["components/FormItem/index.tsx","components/Input/index.tsx","components/Output/index.tsx","data/screw_specifications.ts","data/materials.ts","data/thread_system.ts","components/App/index.tsx","data/load_calculator.ts","reportWebVitals.ts","index.tsx"],"names":["FormItem","input","children","label","className","SelectInput","options","value","onChange","length","event","target","includes","isValidOption","map","opt","TextInput","ev","NumberInput","units","expectedDigits","step","min","max","inputProps","type","parsed","parseFloat","Number","isNaN","parseNumberOrNull","style","width","undefined","React","useState","focused","setFocused","onFocus","onBlur","Input","props","valueType","Output","mmToInch","mm","screwSpecifications","Inch","minorDiameter","Metric","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11","M12","M14","M16","M18","M20","M22","M24","M27","M30","M33","M36","M39","M42","M45","M48","materials","Steel","shearStrengthFactor","Aluminum","Other","materialNames","Object","keys","threadSystems","getDefaultThreadSetting","threadSystem","threadSize","formatLbf","lbf","Intl","NumberFormat","unit","formatToParts","join","App","setThreadSetting","setThreadSize","systemThreadSizes","useMemo","material","setMaterial","uts","setUts","fasteners","setFasteners","fos","setFos","tensileStrength","factorOfSafety","fastenerCount","area","Math","PI","factoredTensileStrength","tensileLoad","shearLoad","round","calculateScrewLoads","setThreadSystem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.825c7639.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\ninterface Props {\n  label?: string;\n  children: React.ReactElement;\n}\n\nexport default function FormItem({ children: input, label }: Props): React.ReactElement {\n  return label ? (\n    <label className=\"FormItem\">\n      <span className=\"FormItem-label\">{label}</span>\n      {input}\n    </label>\n  ) : (\n    <span className=\"FormItem\">{input}</span>\n  );\n}\n","import React from \"react\";\nimport \"./styles.css\";\n\ninterface InputProps<T = string> {\n  value: T;\n  onChange: (value: T) => void;\n}\n\ninterface SelectInputProps<T extends string> extends InputProps<T> {\n  options: readonly T[];\n}\n\ninterface NumberInputProps extends InputProps<number | null> {\n  valueType: \"number\";\n  units?: string;\n  expectedDigits?: number;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\ninterface StringInputProps extends InputProps<string> {\n  valueType?: \"string\";\n}\n\ntype Props<T extends string> =\n  | SelectInputProps<T>\n  | StringInputProps\n  | NumberInputProps;\n\n/**\n * Checks if `value` is a member of the union type `T` by checking if it is a member of `options`.\n */\nconst isValidOption = <T extends string>(\n  value: string,\n  options: readonly T[]\n): value is T => {\n  const optionsStrArr: readonly string[] = options; // widen the type of options array to allow includes call\n  return optionsStrArr.includes(value);\n};\n\n/**\n * Parse integer or return null for invalid value.\n */\nconst parseNumberOrNull = (value: string): number | null => {\n  const parsed = parseFloat(value);\n  return Number.isNaN(parsed) ? null : parsed;\n};\n\nfunction SelectInput<T extends string>({\n  options,\n  value,\n  onChange,\n}: SelectInputProps<T>): React.ReactElement {\n  if (options.length === 0) return <></>;\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value;\n    if (isValidOption(value, options)) onChange(value);\n  };\n\n  return (\n    <select\n      className=\"Input Input_SelectInput\"\n      onChange={handleChange}\n      value={value}\n    >\n      {options.map((opt) => (\n        <option value={opt} key={opt}>\n          {opt}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nfunction TextInput({\n  value,\n  onChange,\n}: InputProps<string>): React.ReactElement {\n  return (\n    <input\n      className=\"Input\"\n      onChange={(ev) => onChange(ev.target.value)}\n      value={value ?? \"\"}\n    />\n  );\n}\n\nfunction NumberInput({\n  value,\n  onChange,\n  units,\n  expectedDigits,\n  step,\n  min,\n  max,\n}: NumberInputProps): React.ReactElement {\n  const inputProps = {\n    type: \"number\",\n    onChange: (ev: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(parseNumberOrNull(ev.target.value)),\n    value: value ?? \"\",\n    style: expectedDigits\n      ? {\n          width: `${expectedDigits + 2}ch`,\n        }\n      : undefined,\n    min,\n    max,\n    step,\n  };\n\n  const [focused, setFocused] = React.useState(false);\n\n  return units ? (\n    <span className={focused ? \"Input Input__focused\" : \"Input\"}>\n      <input {...inputProps} onFocus={() => setFocused(true)} onBlur={() => setFocused(false)} />\n      <span>{units}</span>\n    </span>\n  ) : (\n    <input {...inputProps} className=\"Input\"  />\n  );\n}\n\nexport default function Input<T extends string>(\n  props: Props<T>\n): React.ReactElement {\n  return \"options\" in props ? (\n    <SelectInput {...props} />\n  ) : \"valueType\" in props && props.valueType === \"number\" ? (\n    <NumberInput {...props} />\n  ) : (\n    <TextInput {...props} />\n  );\n}\n","import FormItem from \"components/FormItem\";\nimport React from \"react\";\nimport \"./styles.css\";\n\ninterface Props {\n  value: string;\n  label: string;\n}\n\nexport default function Output({ value, label }: Props): React.ReactElement {\n  return (\n    <FormItem label={label}>\n      <output className=\"Output-value\">{value}</output>\n    </FormItem>\n  );\n}\n","import { ThreadSystem } from \"./thread_system\";\n\nexport interface ScrewSpecification {\n  minorDiameter: number;\n}\n\nconst mmToInch = (mm: number): number => mm * 0.0393701;\n\n// It's mildly less performant to calculate these on load instead of save the value in inches in the first place\n// but it's more maintainable to keep it in mm here.\nexport const metricScrewSpecifications = {\n  M1: { minorDiameter: mmToInch(0.693) },\n  \"M1.1\": { minorDiameter: mmToInch(0.793) },\n  \"M1.2\": { minorDiameter: mmToInch(0.893) },\n  \"M1.4\": { minorDiameter: mmToInch(1.032) },\n  \"M1.6\": { minorDiameter: mmToInch(1.171) },\n  \"M1.8\": { minorDiameter: mmToInch(1.371) },\n  M2: { minorDiameter: mmToInch(1.509) },\n  \"M2.2\": { minorDiameter: mmToInch(1.648) },\n  \"M2.5\": { minorDiameter: mmToInch(1.948) },\n  M3: { minorDiameter: mmToInch(2.387) },\n  \"M3.5\": { minorDiameter: mmToInch(2.764) },\n  M4: { minorDiameter: mmToInch(3.141) },\n  \"M4.5\": { minorDiameter: mmToInch(3.58) },\n  M5: { minorDiameter: mmToInch(4.019) },\n  M6: { minorDiameter: mmToInch(4.773) },\n  M7: { minorDiameter: mmToInch(5.773) },\n  M8: { minorDiameter: mmToInch(6.466) },\n  M9: { minorDiameter: mmToInch(7.466) },\n  M10: { minorDiameter: mmToInch(8.16) },\n  M11: { minorDiameter: mmToInch(9.16) },\n  M12: { minorDiameter: mmToInch(9.853) },\n  M14: { minorDiameter: mmToInch(11.546) },\n  M16: { minorDiameter: mmToInch(13.546) },\n  M18: { minorDiameter: mmToInch(14.933) },\n  M20: { minorDiameter: mmToInch(16.933) },\n  M22: { minorDiameter: mmToInch(18.933) },\n  M24: { minorDiameter: mmToInch(20.319) },\n  M27: { minorDiameter: mmToInch(23.319) },\n  M30: { minorDiameter: mmToInch(25.706) },\n  M33: { minorDiameter: mmToInch(28.706) },\n  M36: { minorDiameter: mmToInch(31.093) },\n  M39: { minorDiameter: mmToInch(34.093) },\n  M42: { minorDiameter: mmToInch(36.479) },\n  M45: { minorDiameter: mmToInch(39.479) },\n  M48: { minorDiameter: mmToInch(41.866) },\n} as const;\nexport type MetricScrewName = keyof typeof metricScrewSpecifications;\n\nexport const inchScrewSpecifications = {\n  \"1-64\": { minorDiameter: 0.0544 },\n  \"2-56\": { minorDiameter: 0.0648 },\n  \"3-48\": { minorDiameter: 0.0741 },\n  \"4-40\": { minorDiameter: 0.0822 },\n  \"5-40\": { minorDiameter: 0.0952 },\n  \"6-32\": { minorDiameter: 0.1008 },\n  \"8-32\": { minorDiameter: 0.1268 },\n  \"10-24\": { minorDiameter: 0.1404 },\n  \"12-24\": { minorDiameter: 0.1664 },\n  '1/4\"-20': { minorDiameter: 0.1905 },\n  '5/16\"-18': { minorDiameter: 0.2464 },\n  '3/8\"-16': { minorDiameter: 0.3005 },\n  '7/16\"-14': { minorDiameter: 0.3525 },\n  '1/2\"-13': { minorDiameter: 0.4084 },\n  '9/16\"-12': { minorDiameter: 0.4633 },\n  '5/8\"-11': { minorDiameter: 0.5168 },\n  '3/4\"-10': { minorDiameter: 0.6309 },\n  '7/8\"-9': { minorDiameter: 0.7427 },\n  '1\"-8': { minorDiameter: 0.8512 },\n  '1-1/8\"-7': { minorDiameter: 0.9549 },\n  '1 1/4\"-7': { minorDiameter: 1.0799 },\n  '1-3/8\"-6': { minorDiameter: 1.1766 },\n  '1 1/2\"-6': { minorDiameter: 1.3016 },\n  '1 3/4\"-5': { minorDiameter: 1.5119 },\n  '2\"-4.5': { minorDiameter: 1.7353 },\n  '2 1/4\"-4.5': { minorDiameter: 1.9853 },\n  '2 1/2\"-4': { minorDiameter: 2.2023 },\n  '2 3/4\"-4': { minorDiameter: 2.4523 },\n  '3\"-4': { minorDiameter: 2.7023 },\n  '3 1/4\"-4': { minorDiameter: 2.9523 },\n  '3 1/2\"-4': { minorDiameter: 3.2023 },\n  '3 3/4\"-4': { minorDiameter: 3.4523 },\n  '4\"-4': { minorDiameter: 3.7023 },\n};\nexport type EnglishScrewName = keyof typeof metricScrewSpecifications;\n\nexport const screwSpecifications: Readonly<\n  Record<ThreadSystem, Record<string, ScrewSpecification>>\n> = {\n  Inch: inchScrewSpecifications,\n  Metric: metricScrewSpecifications,\n};\n","export interface Material {\n  shearStrengthFactor?: number;\n}\n\n// Ref: https://roymech.org/Useful_Tables/Matter/shear_tensile.html\n// TODO: Find an official standard for this\nexport const materials = {\n  Steel: {\n    shearStrengthFactor: 0.75,\n  },\n  \"Ductile iron\": {\n    shearStrengthFactor: 0.9,\n  },\n  \"Malleable iron\": {\n    shearStrengthFactor: 1,\n  },\n  \"Wrought iron\": {\n    shearStrengthFactor: 0.83,\n  },\n  \"Cast iron\": {\n    shearStrengthFactor: 1.3,\n  },\n  \"Copper / copper alloy\": {\n    shearStrengthFactor: 0.65,\n  },\n  Aluminum: {\n    shearStrengthFactor: 0.65,\n  },\n  Other: {\n    shearStrengthFactor: undefined,\n  },\n} as const;\n\nexport type MaterialName = keyof typeof materials;\nexport const materialNames: MaterialName[] = Object.keys(\n  materials\n) as MaterialName[];\n","export const threadSystems = [\"Inch\", \"Metric\"] as const;\n\nexport type ThreadSystem = (typeof threadSystems)[number];\n","import FormItem from \"components/FormItem\";\nimport Input from \"components/Input\";\nimport Output from \"components/Output\";\nimport calculateScrewLoads from \"data/load_calculator\";\nimport { MaterialName, materialNames, materials } from \"data/materials\";\nimport { screwSpecifications } from \"data/screw_specifications\";\nimport { ThreadSystem, threadSystems } from \"data/thread_system\";\nimport React from \"react\";\nimport \"./styles.css\";\n\ninterface ThreadSetting {\n  threadSystem: ThreadSystem;\n  threadSize: string;\n}\n\nconst getDefaultThreadSetting = (\n  threadSystem: ThreadSystem\n): ThreadSetting => ({\n  threadSystem,\n  threadSize: Object.keys(screwSpecifications[threadSystem])[0],\n});\n\n// Override the unit to lbf (pound-force is not a valid 'simple unit' for JS)\nconst formatLbf = (lbf: number): string =>\n  new Intl.NumberFormat(undefined, {\n    style: \"unit\",\n    unit: \"pound\",\n  })\n    .formatToParts(lbf)\n    .map(({ type, value }) => (type === \"unit\" ? \"lbf\" : value))\n    .join(\"\");\n\nexport default function App(): React.ReactElement {\n  const [{ threadSystem, threadSize }, setThreadSetting] =\n    React.useState<ThreadSetting>(getDefaultThreadSetting(\"Inch\"));\n  const setThreadSystem = (value: ThreadSystem) =>\n    setThreadSetting(getDefaultThreadSetting(value));\n  const setThreadSize = (value: string) =>\n    setThreadSetting({ threadSystem, threadSize: value });\n\n  const systemThreadSizes = React.useMemo(\n    () => Object.keys(screwSpecifications[threadSystem]),\n    [threadSystem]\n  );\n\n  const [material, setMaterial] = React.useState<MaterialName>(\"Steel\");\n  const [uts, setUts] = React.useState<number | null>(170000);\n  const [fasteners, setFasteners] = React.useState<number | null>(1);\n  const [fos, setFos] = React.useState<number | null>(3);\n\n  const onMeasurementSystemChange = (value: ThreadSystem) => {\n    setThreadSize(Object.keys(screwSpecifications[threadSystem])[0]);\n    setThreadSystem(value);\n  };\n\n  const [tensileLoad, shearLoad] =\n    uts !== null && fasteners !== null && fos !== null\n      ? calculateScrewLoads(\n          threadSystem,\n          threadSize,\n          uts,\n          materials[material].shearStrengthFactor,\n          fos,\n          fasteners\n        )\n      : [null, null];\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        <header>\n          <h1 className=\"App-title\">Bolt Load Calculator</h1>\n        </header>\n        <div className=\"App-inputs\">\n          <FormItem label=\"Thread System\">\n            <Input\n              value={threadSystem}\n              onChange={onMeasurementSystemChange}\n              options={threadSystems}\n            />\n          </FormItem>\n          <FormItem label=\"Size\">\n            <Input\n              value={threadSize}\n              onChange={setThreadSize}\n              options={systemThreadSizes}\n            />\n          </FormItem>\n\n          <FormItem label=\"Material\">\n            <Input\n              options={materialNames}\n              value={material}\n              onChange={setMaterial}\n            />\n          </FormItem>\n\n          <FormItem label=\"Material UTS\">\n            <Input\n              valueType=\"number\"\n              value={uts}\n              onChange={setUts}\n              units=\"psi\"\n              expectedDigits={6}\n              step={10000}\n              min={0}\n            />\n          </FormItem>\n\n          <FormItem label=\"Fasteners\">\n            <Input\n              valueType=\"number\"\n              value={fasteners}\n              onChange={setFasteners}\n              expectedDigits={4}\n              min={1}\n            />\n          </FormItem>\n\n          <FormItem label=\"Factor of Safety\">\n            <Input\n              valueType=\"number\"\n              value={fos}\n              onChange={setFos}\n              expectedDigits={4}\n              min={1}\n              step={0.05}\n            />\n          </FormItem>\n        </div>\n        <div className=\"App-inputs\">\n          {tensileLoad && (\n            <Output label=\"Max Tensile Load\" value={formatLbf(tensileLoad)} />\n          )}\n\n          {shearLoad && (\n            <Output label=\"Max Shear Load\" value={formatLbf(shearLoad)} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { screwSpecifications } from \"./screw_specifications\";\nimport { ThreadSystem } from \"./thread_system\";\n\nexport default function calculateScrewLoads(\n  threadSystem: ThreadSystem,\n  threadSize: string,\n  tensileStrength: number,\n  shearStrengthFactor = 0.6,\n  factorOfSafety = 1,\n  fastenerCount = 1\n): [tensile: number, shear: number] {\n  const { minorDiameter } = screwSpecifications[threadSystem][threadSize];\n  const area = Math.PI * (minorDiameter / 2) ** 2;\n\n  const factoredTensileStrength =\n    (tensileStrength * fastenerCount) / factorOfSafety;\n  const tensileLoad = factoredTensileStrength * area;\n\n  const shearStrength = shearStrengthFactor * factoredTensileStrength;\n  const shearLoad = shearStrength * area;\n\n  return [Math.round(tensileLoad), Math.round(shearLoad)];\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"the-new-css-reset/css/reset.css\"\nimport './index.css';\nimport App from 'components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// TODO: Add vitals reporting\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}